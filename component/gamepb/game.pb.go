// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: game.proto

package gamepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Begin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌桌编号  123456
	DeskNo uint32 `protobuf:"varint,1,opt,name=deskNo,proto3" json:"deskNo,omitempty"`
	// 交易编号   123456 + 20230122  + 00001    房间号 + 年月日 + 轮数递增   或者 uuid  构成 牌桌编号
	TransactionId string `protobuf:"bytes,2,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	// map 选择的规则 key  匹配key  uint32 具体的值   根据匹配的规则定 当匹配到 需要bool 的时候 则0 为 false  1 为true
	Rules map[string]uint32 `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// map 会话编号 玩家列表信息 key 为会话对象唯一标识
	Players map[int64]*Player `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 总人数
	PeopleNum uint32 `protobuf:"varint,5,opt,name=peopleNum,proto3" json:"peopleNum,omitempty"`
	// 当前轮数
	RoundNum uint32 `protobuf:"varint,6,opt,name=roundNum,proto3" json:"roundNum,omitempty"`
	// 抽水比例
	Ratio float64 `protobuf:"fixed64,7,opt,name=ratio,proto3" json:"ratio,omitempty"`
	// 房间类型  0 公共房 1 私人房
	Type uint32 `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	// 俱乐部编号
	ClubId uint64 `protobuf:"varint,9,opt,name=clubId,proto3" json:"clubId,omitempty"`
	// 观看玩家列表  观看玩家编号  将观看玩家的会话对象也绑定 房间的消息队列 做观看玩家的离开处理 同步房间内的广播消息
	WatchPlayers map[int64]uint64 `protobuf:"bytes,10,rep,name=watchPlayers,proto3" json:"watchPlayers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Begin) Reset() {
	*x = Begin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Begin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Begin) ProtoMessage() {}

func (x *Begin) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Begin.ProtoReflect.Descriptor instead.
func (*Begin) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{0}
}

func (x *Begin) GetDeskNo() uint32 {
	if x != nil {
		return x.DeskNo
	}
	return 0
}

func (x *Begin) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Begin) GetRules() map[string]uint32 {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *Begin) GetPlayers() map[int64]*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Begin) GetPeopleNum() uint32 {
	if x != nil {
		return x.PeopleNum
	}
	return 0
}

func (x *Begin) GetRoundNum() uint32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *Begin) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *Begin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Begin) GetClubId() uint64 {
	if x != nil {
		return x.ClubId
	}
	return 0
}

func (x *Begin) GetWatchPlayers() map[int64]uint64 {
	if x != nil {
		return x.WatchPlayers
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家座位位置   未入坐 则是-1
	DeskPos int32 `protobuf:"varint,1,opt,name=deskPos,proto3" json:"deskPos,omitempty"`
	// 玩家编号
	Uid uint64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// 玩家昵称
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// 玩家性别
	Sex uint32 `protobuf:"varint,4,opt,name=sex,proto3" json:"sex,omitempty"`
	// 头像
	HeadUrl string `protobuf:"bytes,5,opt,name=headUrl,proto3" json:"headUrl,omitempty"`
	// 玩家余额
	Score float64 `protobuf:"fixed64,6,opt,name=score,proto3" json:"score,omitempty"`
	// 玩家是否准备
	IsReady bool `protobuf:"varint,7,opt,name=isReady,proto3" json:"isReady,omitempty"`
	// 玩家ip地址
	Ip string `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	// 玩家带入金额
	CarryScore float64 `protobuf:"fixed64,9,opt,name=carryScore,proto3" json:"carryScore,omitempty"`
	// 玩家是否离线
	Offline bool `protobuf:"varint,20,opt,name=offline,proto3" json:"offline,omitempty"`
	// 商户号
	BusinessId int32 `protobuf:"varint,21,opt,name=businessId,proto3" json:"businessId,omitempty"`
	// 站点
	Site string `protobuf:"bytes,22,opt,name=site,proto3" json:"site,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{1}
}

func (x *Player) GetDeskPos() int32 {
	if x != nil {
		return x.DeskPos
	}
	return 0
}

func (x *Player) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Player) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Player) GetSex() uint32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *Player) GetHeadUrl() string {
	if x != nil {
		return x.HeadUrl
	}
	return ""
}

func (x *Player) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Player) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *Player) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Player) GetCarryScore() float64 {
	if x != nil {
		return x.CarryScore
	}
	return 0
}

func (x *Player) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

func (x *Player) GetBusinessId() int32 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *Player) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

// 下注   每一轮结算   总结算
type PlayerSettle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌桌编号
	DeskNo uint32 `protobuf:"varint,1,opt,name=deskNo,proto3" json:"deskNo,omitempty"`
	// 交易编号   123456 + 20230122  + 00001    房间号 + 年月日 + 轮数递增   或者 uuid  构成 牌桌编号
	TransactionId string `protobuf:"bytes,2,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	// 当前轮数
	RoundNum uint32 `protobuf:"varint,3,opt,name=roundNum,proto3" json:"roundNum,omitempty"`
	// 玩家结算信息
	PlayerSettleInfos []*PlayerSettleInfo `protobuf:"bytes,4,rep,name=playerSettleInfos,proto3" json:"playerSettleInfos,omitempty"`
	// 是否为最后一轮   为大结算 需要对大赢家进行抽水
	IsLastRound bool `protobuf:"varint,7,opt,name=isLastRound,proto3" json:"isLastRound,omitempty"`
	// 游戏开始时间 毫秒时间戳
	Start int64 `protobuf:"varint,8,opt,name=start,proto3" json:"start,omitempty"`
	// 游戏结束时间 毫秒时间戳
	End int64 `protobuf:"varint,9,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *PlayerSettle) Reset() {
	*x = PlayerSettle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSettle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSettle) ProtoMessage() {}

func (x *PlayerSettle) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSettle.ProtoReflect.Descriptor instead.
func (*PlayerSettle) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerSettle) GetDeskNo() uint32 {
	if x != nil {
		return x.DeskNo
	}
	return 0
}

func (x *PlayerSettle) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PlayerSettle) GetRoundNum() uint32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *PlayerSettle) GetPlayerSettleInfos() []*PlayerSettleInfo {
	if x != nil {
		return x.PlayerSettleInfos
	}
	return nil
}

func (x *PlayerSettle) GetIsLastRound() bool {
	if x != nil {
		return x.IsLastRound
	}
	return false
}

func (x *PlayerSettle) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *PlayerSettle) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

// 单个玩家结算信息
type PlayerSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家编号
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// false 减  true  加操作
	Action bool `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
	// 玩家输赢分数 正数  根据 action 进行加减操作   后续调整为正负值
	Score float64 `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	// 抽水金额
	PumpWater float64 `protobuf:"fixed64,4,opt,name=pumpWater,proto3" json:"pumpWater,omitempty"`
	// 总下注筹码
	TotalBet float64 `protobuf:"fixed64,5,opt,name=totalBet,proto3" json:"totalBet,omitempty"`
	// 位置
	Postion int32 `protobuf:"varint,6,opt,name=postion,proto3" json:"postion,omitempty"`
	// 牌型
	CardType string `protobuf:"bytes,7,opt,name=cardType,proto3" json:"cardType,omitempty"`
	// 开始前金额
	BeforeBalance float64 `protobuf:"fixed64,8,opt,name=beforeBalance,proto3" json:"beforeBalance,omitempty"`
	// 开始后金额
	AfterBalance float64 `protobuf:"fixed64,9,opt,name=afterBalance,proto3" json:"afterBalance,omitempty"`
	// 投注倍数
	BetMultiple float64 `protobuf:"fixed64,10,opt,name=betMultiple,proto3" json:"betMultiple,omitempty"`
	// 抢庄倍数
	BankMultiple float64 `protobuf:"fixed64,11,opt,name=bankMultiple,proto3" json:"bankMultiple,omitempty"`
}

func (x *PlayerSettleInfo) Reset() {
	*x = PlayerSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSettleInfo) ProtoMessage() {}

func (x *PlayerSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSettleInfo.ProtoReflect.Descriptor instead.
func (*PlayerSettleInfo) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerSettleInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerSettleInfo) GetAction() bool {
	if x != nil {
		return x.Action
	}
	return false
}

func (x *PlayerSettleInfo) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PlayerSettleInfo) GetPumpWater() float64 {
	if x != nil {
		return x.PumpWater
	}
	return 0
}

func (x *PlayerSettleInfo) GetTotalBet() float64 {
	if x != nil {
		return x.TotalBet
	}
	return 0
}

func (x *PlayerSettleInfo) GetPostion() int32 {
	if x != nil {
		return x.Postion
	}
	return 0
}

func (x *PlayerSettleInfo) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *PlayerSettleInfo) GetBeforeBalance() float64 {
	if x != nil {
		return x.BeforeBalance
	}
	return 0
}

func (x *PlayerSettleInfo) GetAfterBalance() float64 {
	if x != nil {
		return x.AfterBalance
	}
	return 0
}

func (x *PlayerSettleInfo) GetBetMultiple() float64 {
	if x != nil {
		return x.BetMultiple
	}
	return 0
}

func (x *PlayerSettleInfo) GetBankMultiple() float64 {
	if x != nil {
		return x.BankMultiple
	}
	return 0
}

// 每一轮的结算信息
type Settle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌桌编号 123456
	DeskNo uint32 `protobuf:"varint,1,opt,name=deskNo,proto3" json:"deskNo,omitempty"`
	// 交易编号   123456 + 20230122  + 00001    房间号 + 年月日 + 轮数递增   或者 uuid  构成 牌桌编号
	TransactionId string `protobuf:"bytes,2,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	// 当前轮数
	RoundNum uint32 `protobuf:"varint,3,opt,name=roundNum,proto3" json:"roundNum,omitempty"`
	// 玩家结算信息
	PlayerSettleInfos []*PlayerSettleInfo `protobuf:"bytes,4,rep,name=playerSettleInfos,proto3" json:"playerSettleInfos,omitempty"`
	// 是否为最后一轮   为大结算 需要对大赢家进行抽水
	IsLastRound bool `protobuf:"varint,7,opt,name=isLastRound,proto3" json:"isLastRound,omitempty"`
}

func (x *Settle) Reset() {
	*x = Settle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settle) ProtoMessage() {}

func (x *Settle) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settle.ProtoReflect.Descriptor instead.
func (*Settle) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{4}
}

func (x *Settle) GetDeskNo() uint32 {
	if x != nil {
		return x.DeskNo
	}
	return 0
}

func (x *Settle) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Settle) GetRoundNum() uint32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *Settle) GetPlayerSettleInfos() []*PlayerSettleInfo {
	if x != nil {
		return x.PlayerSettleInfos
	}
	return nil
}

func (x *Settle) GetIsLastRound() bool {
	if x != nil {
		return x.IsLastRound
	}
	return false
}

type SettleHisotry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSettle *PlayerSettle `protobuf:"bytes,1,opt,name=playerSettle,proto3" json:"playerSettle,omitempty"`
	// 规则描述
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *SettleHisotry) Reset() {
	*x = SettleHisotry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleHisotry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleHisotry) ProtoMessage() {}

func (x *SettleHisotry) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleHisotry.ProtoReflect.Descriptor instead.
func (*SettleHisotry) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{5}
}

func (x *SettleHisotry) GetPlayerSettle() *PlayerSettle {
	if x != nil {
		return x.PlayerSettle
	}
	return nil
}

func (x *SettleHisotry) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// 轮结束
type RoundOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌桌编号
	DeskNo uint32 `protobuf:"varint,1,opt,name=deskNo,proto3" json:"deskNo,omitempty"`
	// 是否为最后一轮
	IsLastRound bool `protobuf:"varint,3,opt,name=isLastRound,proto3" json:"isLastRound,omitempty"`
	// 当前轮数
	RoundNum uint32 `protobuf:"varint,4,opt,name=roundNum,proto3" json:"roundNum,omitempty"`
	// 是否解散
	IsDissolution bool `protobuf:"varint,5,opt,name=isDissolution,proto3" json:"isDissolution,omitempty"`
	// 解散类型   0  正常解散  1 立即结算解散
	DissolutionType uint32 `protobuf:"varint,6,opt,name=dissolutionType,proto3" json:"dissolutionType,omitempty"`
}

func (x *RoundOver) Reset() {
	*x = RoundOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundOver) ProtoMessage() {}

func (x *RoundOver) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundOver.ProtoReflect.Descriptor instead.
func (*RoundOver) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{6}
}

func (x *RoundOver) GetDeskNo() uint32 {
	if x != nil {
		return x.DeskNo
	}
	return 0
}

func (x *RoundOver) GetIsLastRound() bool {
	if x != nil {
		return x.IsLastRound
	}
	return false
}

func (x *RoundOver) GetRoundNum() uint32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *RoundOver) GetIsDissolution() bool {
	if x != nil {
		return x.IsDissolution
	}
	return false
}

func (x *RoundOver) GetDissolutionType() uint32 {
	if x != nil {
		return x.DissolutionType
	}
	return 0
}

// 重新登陆断线重连
type ReJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌桌编号
	DeskNo uint32 `protobuf:"varint,1,opt,name=deskNo,proto3" json:"deskNo,omitempty"`
	// 玩家编号
	UId uint64 `protobuf:"varint,2,opt,name=uId,proto3" json:"uId,omitempty"`
}

func (x *ReJoin) Reset() {
	*x = ReJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReJoin) ProtoMessage() {}

func (x *ReJoin) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReJoin.ProtoReflect.Descriptor instead.
func (*ReJoin) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{7}
}

func (x *ReJoin) GetDeskNo() uint32 {
	if x != nil {
		return x.DeskNo
	}
	return 0
}

func (x *ReJoin) GetUId() uint64 {
	if x != nil {
		return x.UId
	}
	return 0
}

// 游戏场景内重新连接
type ReConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌桌编号
	DeskNo uint32 `protobuf:"varint,1,opt,name=deskNo,proto3" json:"deskNo,omitempty"`
	// 玩家编号
	Uid uint64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *ReConnect) Reset() {
	*x = ReConnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReConnect) ProtoMessage() {}

func (x *ReConnect) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReConnect.ProtoReflect.Descriptor instead.
func (*ReConnect) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{8}
}

func (x *ReConnect) GetDeskNo() uint32 {
	if x != nil {
		return x.DeskNo
	}
	return 0
}

func (x *ReConnect) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// 玩家挂后台
type Pause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌桌编号
	DeskNo uint32 `protobuf:"varint,1,opt,name=deskNo,proto3" json:"deskNo,omitempty"`
	// 玩家编号
	Uid uint64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *Pause) Reset() {
	*x = Pause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pause) ProtoMessage() {}

func (x *Pause) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pause.ProtoReflect.Descriptor instead.
func (*Pause) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{9}
}

func (x *Pause) GetDeskNo() uint32 {
	if x != nil {
		return x.DeskNo
	}
	return 0
}

func (x *Pause) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// 玩家切后台回来
type Resume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌桌编号
	DeskNo uint32 `protobuf:"varint,1,opt,name=deskNo,proto3" json:"deskNo,omitempty"`
	// 玩家编号
	Uid uint64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *Resume) Reset() {
	*x = Resume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resume) ProtoMessage() {}

func (x *Resume) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resume.ProtoReflect.Descriptor instead.
func (*Resume) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{10}
}

func (x *Resume) GetDeskNo() uint32 {
	if x != nil {
		return x.DeskNo
	}
	return 0
}

func (x *Resume) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// 正常解散
type Dissolve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌桌编号
	DeskNo uint32 `protobuf:"varint,2,opt,name=deskNo,proto3" json:"deskNo,omitempty"`
	// 交易编号   123456 + 20230122  + 00001    房间号 + 年月日 + 轮数递增   或者 uuid  构成 牌桌编号
	TransactionId string `protobuf:"bytes,3,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *Dissolve) Reset() {
	*x = Dissolve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dissolve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dissolve) ProtoMessage() {}

func (x *Dissolve) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dissolve.ProtoReflect.Descriptor instead.
func (*Dissolve) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{11}
}

func (x *Dissolve) GetDeskNo() uint32 {
	if x != nil {
		return x.DeskNo
	}
	return 0
}

func (x *Dissolve) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// 强制解散
type ForceDissolve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌桌编号
	DeskNo uint32 `protobuf:"varint,1,opt,name=deskNo,proto3" json:"deskNo,omitempty"`
	// 交易编号   123456 + 20230122  + 00001    房间号 + 年月日 + 轮数递增   或者 uuid  构成 牌桌编号
	TransactionId string `protobuf:"bytes,2,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *ForceDissolve) Reset() {
	*x = ForceDissolve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceDissolve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceDissolve) ProtoMessage() {}

func (x *ForceDissolve) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceDissolve.ProtoReflect.Descriptor instead.
func (*ForceDissolve) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{12}
}

func (x *ForceDissolve) GetDeskNo() uint32 {
	if x != nil {
		return x.DeskNo
	}
	return 0
}

func (x *ForceDissolve) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// 中途加入
type MidWayEnter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌桌编号
	DeskNo uint32 `protobuf:"varint,1,opt,name=deskNo,proto3" json:"deskNo,omitempty"`
	// 玩家编号
	UId uint64 `protobuf:"varint,2,opt,name=uId,proto3" json:"uId,omitempty"`
}

func (x *MidWayEnter) Reset() {
	*x = MidWayEnter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidWayEnter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidWayEnter) ProtoMessage() {}

func (x *MidWayEnter) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidWayEnter.ProtoReflect.Descriptor instead.
func (*MidWayEnter) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{13}
}

func (x *MidWayEnter) GetDeskNo() uint32 {
	if x != nil {
		return x.DeskNo
	}
	return 0
}

func (x *MidWayEnter) GetUId() uint64 {
	if x != nil {
		return x.UId
	}
	return 0
}

// 观看玩家离开
type WatchLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌桌编号
	DeskNo uint32 `protobuf:"varint,1,opt,name=deskNo,proto3" json:"deskNo,omitempty"`
	// 玩家编号
	UId uint64 `protobuf:"varint,2,opt,name=uId,proto3" json:"uId,omitempty"`
}

func (x *WatchLeave) Reset() {
	*x = WatchLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchLeave) ProtoMessage() {}

func (x *WatchLeave) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchLeave.ProtoReflect.Descriptor instead.
func (*WatchLeave) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{14}
}

func (x *WatchLeave) GetDeskNo() uint32 {
	if x != nil {
		return x.DeskNo
	}
	return 0
}

func (x *WatchLeave) GetUId() uint64 {
	if x != nil {
		return x.UId
	}
	return 0
}

var File_game_proto protoreflect.FileDescriptor

var file_game_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x67, 0x61,
	0x6d, 0x65, 0x22, 0xab, 0x04, 0x0a, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65,
	0x73, 0x6b, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xaa, 0x02, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x73, 0x6b, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65,
	0x73, 0x6b, 0x50, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x22, 0xf8, 0x01,
	0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xd2, 0x02, 0x0a, 0x10, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x75, 0x6d, 0x70, 0x57, 0x61, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x70, 0x75, 0x6d, 0x70, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6e,
	0x6b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0xca, 0x01,
	0x0a, 0x06, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x6b,
	0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x5b, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x6f, 0x74, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x73, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x06, 0x52,
	0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x49, 0x64, 0x22,
	0x35, 0x0a, 0x09, 0x52, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65,
	0x73, 0x6b, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x05, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x48, 0x0a,
	0x08, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x73,
	0x6b, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e,
	0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x6b,
	0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x0b, 0x4d, 0x69, 0x64, 0x57, 0x61, 0x79,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x49, 0x64, 0x22,
	0x36, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x65, 0x73, 0x6b, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x75, 0x49, 0x64, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2e, 0x2f, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x62, 0x3b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_game_proto_rawDescOnce sync.Once
	file_game_proto_rawDescData = file_game_proto_rawDesc
)

func file_game_proto_rawDescGZIP() []byte {
	file_game_proto_rawDescOnce.Do(func() {
		file_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_game_proto_rawDescData)
	})
	return file_game_proto_rawDescData
}

var file_game_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_game_proto_goTypes = []interface{}{
	(*Begin)(nil),            // 0: game.Begin
	(*Player)(nil),           // 1: game.Player
	(*PlayerSettle)(nil),     // 2: game.PlayerSettle
	(*PlayerSettleInfo)(nil), // 3: game.PlayerSettleInfo
	(*Settle)(nil),           // 4: game.Settle
	(*SettleHisotry)(nil),    // 5: game.SettleHisotry
	(*RoundOver)(nil),        // 6: game.RoundOver
	(*ReJoin)(nil),           // 7: game.ReJoin
	(*ReConnect)(nil),        // 8: game.ReConnect
	(*Pause)(nil),            // 9: game.Pause
	(*Resume)(nil),           // 10: game.Resume
	(*Dissolve)(nil),         // 11: game.Dissolve
	(*ForceDissolve)(nil),    // 12: game.ForceDissolve
	(*MidWayEnter)(nil),      // 13: game.MidWayEnter
	(*WatchLeave)(nil),       // 14: game.WatchLeave
	nil,                      // 15: game.Begin.RulesEntry
	nil,                      // 16: game.Begin.PlayersEntry
	nil,                      // 17: game.Begin.WatchPlayersEntry
}
var file_game_proto_depIdxs = []int32{
	15, // 0: game.Begin.rules:type_name -> game.Begin.RulesEntry
	16, // 1: game.Begin.players:type_name -> game.Begin.PlayersEntry
	17, // 2: game.Begin.watchPlayers:type_name -> game.Begin.WatchPlayersEntry
	3,  // 3: game.PlayerSettle.playerSettleInfos:type_name -> game.PlayerSettleInfo
	3,  // 4: game.Settle.playerSettleInfos:type_name -> game.PlayerSettleInfo
	2,  // 5: game.SettleHisotry.playerSettle:type_name -> game.PlayerSettle
	1,  // 6: game.Begin.PlayersEntry.value:type_name -> game.Player
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_game_proto_init() }
func file_game_proto_init() {
	if File_game_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Begin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSettle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleHisotry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReConnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dissolve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceDissolve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidWayEnter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_game_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_game_proto_goTypes,
		DependencyIndexes: file_game_proto_depIdxs,
		MessageInfos:      file_game_proto_msgTypes,
	}.Build()
	File_game_proto = out.File
	file_game_proto_rawDesc = nil
	file_game_proto_goTypes = nil
	file_game_proto_depIdxs = nil
}
